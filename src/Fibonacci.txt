FIBONACCI IN ASSEMBLY:
R7=data stack register, R6=else part address, R5=1, R1=n,
R2=result of a fib()
Initializing:
0	LDI A R7 		//R7 = data stack register
1	0x100       	//initial address of the data stack
2	LDI A R6		//R6 = holds the address, for cond jump
3	14      		//address, where the else part begins 
4	INC R5			//R5=1, I�ll use this 1 often its cheaper this way
_main:
5	LDI A R1			
6	n       		//R1 = n
7	CALL 9			//call fib, store PC in separated stack register
8	STP			    // R2 will hold the end result
_fib:-starts at line 9
if: 
9	MOV A R4 R5 	//R4 = 1
10	SUB A R4 R1		//R4 = 1-n, sets flags (cout doesn�t matter)
11	JMR NS R6 		//jumps to �else� if 1-n < 0; (=> n>1)  
12	MOV A R2 R5		//R2 = 1
13	RTN			    //return from function
 else:
14	PUSH A R1 R7 	//save the current value of n for later
15	DEC A R1 		//R1 = n-1, now we can call fib(n-1)
16	CALL 9			//calling fib(n-1), R2=fib(n-1)
17 	POP A R1 R7		//reloading n to R1, fib(n-1) probably changed R1
18	PUSH A R2 R7	//store fib(n-1) in the stack, R2 will change to fib(n-2)
19	SIM A R1		//R1 = n-2 now we can call fib(n-2)
20	0x2			
21	CALL 9			//calling fib(n-2), R2=fib(n-2)
22  POP A R3 R7     //loading fib(n-1) into R3
23	ADD A R2 R3		//R2=R2+R3, R2=fib(n-2) + fib(n-1); overflow???
 return y;
24	RTN			//return from function; R2=fib(n)
