// Copyright (C) 2019  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/28/2020 15:59:31"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          mult16x16
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module mult16x16_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [15:0] A;
reg [15:0] B;
// wires                                               
wire [31:0] P;

// assign statements (if any)                          
mult16x16 i1 (
// port map - connection between master ports and signals/registers   
	.A(A),
	.B(B),
	.P(P)
);
initial 
begin 
#1000000 $stop;
end 
// A[ 15 ]
initial
begin
	A[15] = 1'b0;
end 
// A[ 14 ]
initial
begin
	A[14] = 1'b0;
end 
// A[ 13 ]
initial
begin
	A[13] = 1'b0;
end 
// A[ 12 ]
initial
begin
	A[12] = 1'b0;
end 
// A[ 11 ]
initial
begin
	A[11] = 1'b0;
end 
// A[ 10 ]
initial
begin
	A[10] = 1'b0;
end 
// A[ 9 ]
initial
begin
	A[9] = 1'b0;
	A[9] = #740000 1'b1;
end 
// A[ 8 ]
initial
begin
	A[8] = 1'b0;
	A[8] = #370000 1'b1;
	A[8] = #370000 1'b0;
end 
// A[ 7 ]
initial
begin
	A[7] = 1'b0;
	A[7] = #190000 1'b1;
	A[7] = #180000 1'b0;
	A[7] = #180000 1'b1;
	A[7] = #190000 1'b0;
	A[7] = #180000 1'b1;
end 
// A[ 6 ]
initial
begin
	A[6] = 1'b0;
	# 100000;
	repeat(3)
	begin
		A[6] = 1'b1;
		A[6] = #90000 1'b0;
		# 90000;
	end
	A[6] = 1'b1;
	A[6] = #100000 1'b0;
	A[6] = #90000 1'b1;
	A[6] = #90000 1'b0;
end 
// A[ 5 ]
initial
begin
	A[5] = 1'b0;
	# 50000;
	repeat(3)
	begin
		A[5] = 1'b1;
		A[5] = #50000 1'b0;
		# 40000;
	end
	A[5] = 1'b1;
	# 50000;
	repeat(3)
	begin
		A[5] = 1'b0;
		A[5] = #50000 1'b1;
		# 40000;
	end
	A[5] = 1'b0;
	# 50000;
	repeat(3)
	begin
		A[5] = 1'b1;
		A[5] = #50000 1'b0;
		# 40000;
	end
	A[5] = 1'b1;
end 
// A[ 4 ]
initial
begin
	A[4] = 1'b0;
	# 30000;
	repeat(2)
	begin
		A[4] = 1'b1;
		A[4] = #20000 1'b0;
		A[4] = #20000 1'b1;
		A[4] = #30000 1'b0;
		# 20000;
	end
	repeat(2)
	begin
		A[4] = 1'b1;
		A[4] = #20000 1'b0;
		A[4] = #30000 1'b1;
		A[4] = #20000 1'b0;
		# 20000;
	end
	A[4] = 1'b1;
	A[4] = #30000 1'b0;
	A[4] = #20000 1'b1;
	A[4] = #20000 1'b0;
	A[4] = #20000 1'b1;
	# 30000;
	repeat(2)
	begin
		A[4] = 1'b0;
		A[4] = #20000 1'b1;
		A[4] = #20000 1'b0;
		A[4] = #30000 1'b1;
		# 20000;
	end
	repeat(2)
	begin
		A[4] = 1'b0;
		A[4] = #20000 1'b1;
		A[4] = #30000 1'b0;
		A[4] = #20000 1'b1;
		# 20000;
	end
	A[4] = 1'b0;
	A[4] = #30000 1'b1;
	A[4] = #20000 1'b0;
	A[4] = #20000 1'b1;
	A[4] = #20000 1'b0;
	A[4] = #30000 1'b1;
end 
// A[ 3 ]
initial
begin
	repeat(6)
	begin
		A[3] = 1'b0;
		# 20000;
		repeat(3)
		begin
			A[3] = 1'b1;
			A[3] = #10000 1'b0;
			# 10000;
		end
		A[3] = 1'b1;
		# 20000;
		repeat(3)
		begin
			A[3] = 1'b0;
			A[3] = #10000 1'b1;
			# 10000;
		end
	end
	A[3] = 1'b0;
	A[3] = #20000 1'b1;
	A[3] = #10000 1'b0;
end 
// A[ 2 ]
initial
begin
	A[2] = 1'b0;
	# 10000;
	repeat(12)
	begin
		A[2] = 1'b1;
		A[2] = #40000 1'b0;
		# 40000;
	end
	A[2] = 1'b1;
end 
// A[ 1 ]
initial
begin
	A[1] = 1'b0;
	# 10000;
	repeat(24)
	begin
		A[1] = 1'b1;
		A[1] = #20000 1'b0;
		# 20000;
	end
	A[1] = 1'b1;
	A[1] = #20000 1'b0;
end 
// A[ 0 ]
always
begin
	A[0] = 1'b0;
	A[0] = #10000 1'b1;
	#10000;
end 
// B[ 15 ]
initial
begin
	B[15] = 1'b0;
end 
// B[ 14 ]
initial
begin
	B[14] = 1'b0;
end 
// B[ 13 ]
initial
begin
	B[13] = 1'b0;
end 
// B[ 12 ]
initial
begin
	B[12] = 1'b0;
end 
// B[ 11 ]
initial
begin
	B[11] = 1'b0;
end 
// B[ 10 ]
initial
begin
	B[10] = 1'b0;
end 
// B[ 9 ]
initial
begin
	B[9] = 1'b0;
	B[9] = #940000 1'b1;
end 
// B[ 8 ]
initial
begin
	B[8] = 1'b0;
	B[8] = #480000 1'b1;
	B[8] = #460000 1'b0;
end 
// B[ 7 ]
initial
begin
	B[7] = 1'b0;
	B[7] = #240000 1'b1;
	B[7] = #240000 1'b0;
	B[7] = #220000 1'b1;
	B[7] = #240000 1'b0;
end 
// B[ 6 ]
initial
begin
	repeat(2)
	begin
		B[6] = 1'b0;
		B[6] = #120000 1'b1;
		# 120000;
	end
	B[6] = 1'b0;
	B[6] = #120000 1'b1;
	B[6] = #100000 1'b0;
	B[6] = #120000 1'b1;
	B[6] = #120000 1'b0;
end 
// B[ 5 ]
initial
begin
	repeat(5)
	begin
		B[5] = 1'b0;
		B[5] = #60000 1'b1;
		# 60000;
	end
	B[5] = 1'b0;
	# 40000;
	repeat(3)
	begin
		B[5] = 1'b1;
		B[5] = #60000 1'b0;
		# 60000;
	end
end 
// B[ 4 ]
initial
begin
	repeat(5)
	begin
		B[4] = 1'b0;
		B[4] = #40000 1'b1;
		# 20000;
	end
	repeat(5)
	begin
		B[4] = 1'b0;
		B[4] = #20000 1'b1;
		# 40000;
	end
	B[4] = 1'b0;
	# 20000;
	repeat(5)
	begin
		B[4] = 1'b1;
		B[4] = #20000 1'b0;
		# 40000;
	end
	B[4] = 1'b1;
	B[4] = #20000 1'b0;
	B[4] = #20000 1'b1;
end 
// B[ 3 ]
initial
begin
	B[3] = 1'b0;
	# 20000;
	repeat(2)
	begin
		B[3] = 1'b1;
		B[3] = #20000 1'b0;
		# 40000;
	end
	repeat(2)
	begin
		repeat(2)
		begin
			B[3] = 1'b1;
			B[3] = #40000 1'b0;
			# 20000;
		end
		B[3] = 1'b1;
		# 40000;
		repeat(2)
		begin
			B[3] = 1'b0;
			B[3] = #40000 1'b1;
			# 20000;
		end
		B[3] = 1'b0;
		# 40000;
	end
	repeat(2)
	begin
		B[3] = 1'b1;
		B[3] = #40000 1'b0;
		# 20000;
	end
	B[3] = 1'b1;
	B[3] = #40000 1'b0;
	B[3] = #40000 1'b1;
end 
// B[ 2 ]
initial
begin
	repeat(6)
	begin
		B[2] = 1'b0;
		B[2] = #40000 1'b1;
		B[2] = #20000 1'b0;
		B[2] = #20000 1'b1;
		B[2] = #40000 1'b0;
		B[2] = #20000 1'b1;
		# 20000;
	end
	B[2] = 1'b0;
end 
// B[ 1 ]
initial
begin
	B[1] = 1'b0;
	# 20000;
	repeat(12)
	begin
		B[1] = 1'b1;
		B[1] = #40000 1'b0;
		# 40000;
	end
	B[1] = 1'b1;
end 
// B[ 0 ]
always
begin
	B[0] = 1'b0;
	B[0] = #20000 1'b1;
	#20000;
end 
endmodule

